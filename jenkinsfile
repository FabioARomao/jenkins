pipeline {
    agent any

    environment {
        // Definir vari√°veis de ambiente, como o nome do ambiente virtual
        VENV_DIR = 'venv'
    }

    stages {
	stage('Preparar Ambiente') {
	    steps {
	        script {
	            sh '''#!/bin/bash
	                set -e  # Faz o script falhar imediatamente se algum comando falhar
	                
	                # Atualizar reposit√≥rios e instalar depend√™ncias
	                apt-get update && apt-get install -y python3.11-venv python3-pip
	                
	                # Criar e ativar o ambiente virtual
	                python3 -m venv ${VENV_DIR}
	                source ${VENV_DIR}/bin/activate
	
	                # Atualizar o pip
	                pip install --upgrade pip
	
	                # Instalar o pandas
	                pip install pandas
	            '''
	        }
	    }
	}


	stage('Copiar Scripts') {
	    steps {
	        script {
	            sh '''
	                # Criar diret√≥rio de destino (caso n√£o exista)
	                mkdir -p /app/scripts
	                
	                # Copiar os scripts
	                cp scripts/*.py /app/scripts/
	                
	                # Listar os arquivos copiados para verificar
	                ls -l /app/scripts/
	            '''
	        }
	    }
	}

        stage('Finalizado') {
            steps {
                echo "Pipeline conclu√≠da com sucesso! üöÄ"
            }
        }

  	stage('Instalar Depend√™ncias') {
  	    steps {
  	        script {
  	            // Instalar depend√™ncias do arquivo requirements.txt
  	            sh '''
  	                source ${VENV_DIR}/bin/activate
  	                pip install -r requirements.txt
  	            '''
  	        }
  	    }
  	}

  	stage('Rodar Testes') {
  	    steps {
  	        script {
  	            // Rodar os testes com pytest (ajuste conforme sua necessidade)
  	            sh '''
  	                source ${VENV_DIR}/bin/activate
  	                pytest --maxfail=1 --disable-warnings -q
  	            '''
  	        }
  	    }
  	}

  	stage('Gerar Relat√≥rio de Testes') {
  	    steps {
  	        script {
  	            // Gerar relat√≥rio de testes (por exemplo, em formato JUnit)
  	            sh '''
  	                source ${VENV_DIR}/bin/activate
  	                pytest --maxfail=1 --disable-warnings --junitxml=resultados.xml
  	            '''
  	        }
  	    }
  	}

  	stage('Publicar Relat√≥rio') {
  	    steps {
  	        junit '**/resultados.xml'  // Publicar o relat√≥rio de testes no Jenkins
  	    }
  	}

  	stage('Deploy') {
  	    when {
  	        branch 'main'  // S√≥ rodar o deploy se for o branch 'main'
  	    }
  	    steps {
  	        script {
  	            // Comandos de deploy (ajuste conforme sua infraestrutura)
  	            echo 'Deploying application...'
  	            // Exemplo: Deploy para servidor ou integra√ß√£o com AWS, Kubernetes, etc.
  	            // sh './deploy.sh'
  	        }
  	    }
  	}


  	  post {
  	      always {
  	          // Limpeza ou a√ß√µes sempre executadas, como desativar o ambiente virtual
  	          sh 'deactivate || true'
  	      }
  	      success {
  	          // A√ß√µes que ocorrem em caso de sucesso, como enviar uma notifica√ß√£o
  	          echo 'Pipeline executada com sucesso!'
  	      }
  	      failure {
  	          // A√ß√µes que ocorrem em caso de falha
  	          echo 'Pipeline falhou.'
  	      }
  	  }
}
