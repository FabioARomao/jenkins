pipeline {
    agent any

    environment {
        // Nome do ambiente virtual
        VENV_DIR = 'venv'
    }

    stages {

        stage('Preparar Ambiente') {
            steps {
                script {
                    sh '''#!/bin/bash
                        set -e  # Para execu√ß√£o em caso de erro

                        # Atualizar pacotes e instalar depend√™ncias
                        apt-get update && apt-get install -y python3.11-venv python3-pip && apt-get clean

                        # Criar o ambiente virtual
                        python3 -m venv ${VENV_DIR}

                        # Ativar ambiente virtual e instalar depend√™ncias
                        . ${VENV_DIR}/bin/activate
                        pip install --upgrade pip
                        pip install pandas
                    '''
                }
            }
        }

        stage('Copiar Scripts') {
            steps {
                script {
                    sh '''#!/bin/bash
                        set -e
                        
                        # Criar diret√≥rio de destino
                        mkdir -p /app/scripts
                        
                        # Copiar scripts para a pasta destino
                        cp scripts/*.py /app/scripts/
                        
                        # Listar arquivos copiados
                        ls -l /app/scripts/
                    '''
                }
            }
        }

        stage('Instalar Depend√™ncias') {
            steps {
                script {
                    sh '''#!/bin/bash
                        set -e
                        
                        . ${VENV_DIR}/bin/activate
                        pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Rodar Testes') {
            steps {
                script {
                    sh '''#!/bin/bash
                        set -e
                        
                        . ${VENV_DIR}/bin/activate
                        pytest --maxfail=1 --disable-warnings -q
                    '''
                }
            }
        }

        stage('Gerar Relat√≥rio de Testes') {
            steps {
                script {
                    sh '''#!/bin/bash
                        set -e
                        
                        . ${VENV_DIR}/bin/activate
                        pytest --maxfail=1 --disable-warnings --junitxml=resultados.xml
                    '''
                }
            }
        }

        stage('Publicar Relat√≥rio') {
            steps {
                junit '**/resultados.xml'  // Publicar o relat√≥rio no Jenkins
            }
        }

        stage('Deploy') {
            when {
                branch 'main'  // S√≥ executa no branch main
            }
            steps {
                script {
                    echo 'Deploying application...'
                    // Exemplo de deploy (ajuste conforme necess√°rio)
                    // sh './deploy.sh'
                }
            }
        }

        stage('Finalizado') {
            steps {
                echo "Pipeline conclu√≠da com sucesso! üöÄ"
            }
        }
    }

    post {
        always {
            echo "Pipeline finalizado, executando a√ß√µes finais..."
        }
        success {
            echo 'Pipeline executada com sucesso!'
        }
        failure {
            echo 'Pipeline falhou.'
        }
    }
}
